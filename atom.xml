<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seventh.]]></title>
  <link href="http://seventhZhao.github.com/atom.xml" rel="self"/>
  <link href="http://seventhZhao.github.com/"/>
  <updated>2013-04-09T16:02:42+08:00</updated>
  <id>http://seventhZhao.github.com/</id>
  <author>
    <name><![CDATA[seventh.zhao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTML结构]]></title>
    <link href="http://seventhZhao.github.com/blog/2013/03/30/3-dot-30/"/>
    <updated>2013-03-30T19:55:00+08:00</updated>
    <id>http://seventhZhao.github.com/blog/2013/03/30/3-dot-30</id>
    <content type="html"><![CDATA[<p>最近复习HTML的基础，重新较全面的了解了HTML的结构。</p>

<p>HTML结构：</p>

<p>不同标签有不同的表现和语义功能。在最近复习的一本书（cssDesignPatterns）中,作者按元素的功能和性质讲标签划分为四个大类：</p>

<h2>结构化块状元素：</h2>

<blockquote><p>结构化块状元素的目的是把文档结构化，方便浏览器解析出一个更好的文档视图，搜索引擎才能识别出重要的关键词，文档处理工具才能应用某些技术（如XSLT）来提取内容和转换结构，JavaScript才能更准确的获取结构进行修改。</p></blockquote>

<p>结构化元素拥有结构化的含义，却没有什么语义上的内涵，结构化元素是让浏览器和查看代码的人员了解html是如何组织的。<br/>
主要的结构化块状元素：<code>ol</code> <code>ul</code> <code>dl</code> <code>table</code> ；<br/>
支持结构化的元素：<code>li</code> <code>dt</code> <code>dd</code> <code>caption</code> <code>thead</code> <code>tfoot</code> <code>tbody</code> <code>colgroup</code> <code>col</code>。</p>

<h2>终端块状元素：</h2>

<p>终端块状元素是文档结构的终结元素，即终端块状元素中不应该有表示结构的元素。终端块状元素是文档块状结构的终端节点。主要的终端块状元素：<code>h*</code>  <code>p</code> <code>blockquote</code> <code>dt</code> <code>address</code> <code>caption</code>。
终端块状元素是内容的主要容器，内容主要是指内联元素和内容。</p>

<h2>多目标块状元素：</h2>

<p>多目标块状元素兼具上面两种元素的功能，可以自由的扩展文档的结构。
HTML提供了7中元素：<code>div</code> <code>li</code> <code>dd</code> <code>td</code> <code>th</code> <code>form</code>。
比如说：当一个列表项作为终端的时候，其中的内容就成为某个列表中的一项。当列表包含了一个结构化块状元素（表格或者另一个列表）时，它从结构上就作为一个大的嵌套结构中的小节点。</p>

<p>多目标块状元素既可以包含块状元素也可以包含内容，但是不能同时包含两者。文本与内联元素的组合才构成了内容。块状元素不应该作为内联元素和文本的兄弟元素。作者将之称为<em>混合内容</em>。应当把内容放在块状元素中——而不是放在他们之间。因为当浏览器遇到混合内容的时候，它会给内容套上一个匿名容器。这是因为当块状元素是按顺序排列的，而其中穿插内容的时候，浏览器不能通识解析两者。而且我们不能对这个匿名块状元素赋予样式。</p>

<h2>内联元素：</h2>

<p>HTML提供了内联元素用于识别文本的含义、控制文本排列的顺序、向文档插入额外的内容。内联元素是文档最底级的标签，HTML中有许多语义化的标签，提供了一些默认的样式。如：<code>code</code> 会被解析为等宽字体，还有<code>em</code> <code>strong</code>元素会对内容进行强调。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[haslayout]]></title>
    <link href="http://seventhZhao.github.com/blog/2013/03/26/haslayout/"/>
    <updated>2013-03-26T15:35:00+08:00</updated>
    <id>http://seventhZhao.github.com/blog/2013/03/26/haslayout</id>
    <content type="html"><![CDATA[<p>IE/Win的表现与其他浏览器不同的原因之一是，显示引擎使用一个称为布局(layout)的内部概念。haslayout 是WindowsInternet Explorer渲染引擎的一个内部组成部分。
在Internet Explorer中，一个元素要么自己对自身的内容进行计算大小和组织，要么依赖于父元素来计算尺寸和组织内容。为了调节这两个不同的概念，渲染引擎采用了 hasLayout 的属性，属性值可以为true或false。当一个元素的hasLayout 属性值为true时，我们说这个元素有一个布局（layout）。
如果某个HTML元素拥有 haslayout 属性，那么这个元素的 haslayout 的值一定只有 true，haslayout 为只读属性一旦被触发，就不可逆转。（除非移除或者重置触发元素halayout的某个属性）通过 IE Developer Toolbar可以查看 IE 下 HTML 元素是否拥有haslayout，在 IE Developer Toolbar 下，拥有 haslayout的元素，通常显示为&#8221;haslayout = -1&#8221;。
下列元素应该是默认具有 layout 的：</p>

<pre><code>* &lt;html&gt;, &lt;body&gt;
* &lt;table&gt;, &lt;tr&gt;, &lt;th&gt;, &lt;td&gt;
* &lt;img&gt;
* &lt;hr&gt;
* &lt;input&gt;, &lt;button&gt;, &lt;select&gt;, &lt;textarea&gt;, &lt;fieldset&gt;, &lt;legend&gt;
* &lt;iframe&gt;, &lt;embed&gt;, &lt;object&gt;, &lt;applet&gt;
* &lt;marquee&gt;
</code></pre>

<p>具有&#8221;layout&#8221; 的元素如果同时 display: inline ，那么它的行为就和标准中所说的 inline-block很类似了：在段落中和普通文字一样在水平方向和连续排列，受 vertical-align影响，并且大小可以根据内容自适应调整。这也可以解释为什么单单在IE/Win中内联元素可以包含块级元素而少出问题，因为在别的浏览器中display:inline 就是内联，不像 IE/Win一旦内联元素拥有 layout 还会变成 inline-block。当网页在IE中有异常表现时，可以尝试激发 haslayout来看看是不是问题所在。常用的方法是给某元素 css 设定zoom:1 。使用 zoom:1是因为大多数情况下，它能在不影响现有环境的条件下激发元素的haslayout。而一旦问题消失，那基本上就可以判断是 haslayout的原因。然后就可以通过设定相应的css属性来对这个问题进行修正了。建议首先要考虑的是设定元素的width/height 属性，其次再考虑其他属性。
对 IE6 及更早版本来说，常用的方法被称为霍莉破解(Holly hack)，即设定这个元素的高度为 1% (height:1%;)。需要注意的是，当这个元素的 overflow 属性被设置为 visible 时，这个方法就失效了。或者使用 IE 的条件注释。</p>

<p>对 IE7 来说，最好的方法时设置元素的最小高度为 0 (min-height:0;)。</p>

<p>haslayout 问题引起的常见bug：</p>

<pre><code>IE6及更低版本的双空白边浮动bug  修复: display:inline
IE5-6/win的3像素偏移bug    修复: _height:1%
IE6的躲躲猫(peek-a-boo)bug  修复: _height:1%
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[comment test]]></title>
    <link href="http://seventhZhao.github.com/blog/2013/03/26/comment-test/"/>
    <updated>2013-03-26T14:35:00+08:00</updated>
    <id>http://seventhZhao.github.com/blog/2013/03/26/comment-test</id>
    <content type="html"><![CDATA[<p>testing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[first blog in pages]]></title>
    <link href="http://seventhZhao.github.com/blog/2013/03/25/first-blog-in-pages/"/>
    <updated>2013-03-25T22:40:00+08:00</updated>
    <id>http://seventhZhao.github.com/blog/2013/03/25/first-blog-in-pages</id>
    <content type="html"><![CDATA[<div class="content">
3.25晚，github:page初尝试。打算用做技术博客。以上。
                                        &#8212;-seventh
</div>

]]></content>
  </entry>
  
</feed>
